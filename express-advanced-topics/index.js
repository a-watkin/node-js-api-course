// Allows for turning on and off debugging messages
// second argument here is an arbitrary namespace
// you can have multiple debuggers
const startupDebugger = require("debug")("app:startup");
// db example
const dbDebugger = require("debug")("app:db");

// loads configs
const config = require("config");

// input validation module
const Joi = require("@hapi/joi");
// for logging - http requests only
const morgan = require("morgan");
const express = require("express");
// called app by convention
const app = express();

// Configuration (config) - how you access config variables using config module
console.log("Application name: " + config.get("name"));
console.log("Mail server: " + config.get("mail.host"));

// to get the environment the code is running under
// dev and production config etc
// process.env.NODE_ENV;
console.log(`NODE_ENV: ${process.env.NODE_ENV}`);

// getting app settings, you can use it to get NODE_ENV also
// if NODE_ENV is not set though it wil return development by default
console.log(`app: ${app.get("env")}`);

// enabling logging only if env is development
if (app.get("env") === "development") {
  // logging module - it logs http requests, tiny being the level of logging
  app.use(morgan("tiny"));
  console.log("Morgan enabled...");

  // debugger equivalent of above
  startupDebugger("Morgan enabled...");
}

// my middleware for demo purposes
const logger = require("./logger");

// Helmet helps you secure your Express apps by setting various HTTP headers
const helmet = require("helmet");
app.use(helmet());

// installing a middleware
app.use(logger);

// next is a reference to the next middleware function in the pipline
app.use(function(req, res, next) {
  // perform some action for this middleware
  console.log("Authenticating");
  // pass output to the next middleware function
  // if you don't put next then the app will hang
  // you have to terminate the request response cycle
  next();
});

// BUILT IN MIDDLEWARE
// tells express to use json, it does this via middleware
app.use(express.json());

// parses urls with url encoded payloads, eg key=value&key=value
// extends means it can also take complex objects from the url
// like lists and array
app.use(express.urlencoded({ extended: true }));

// tells the app where to find static content
// so anything in the public folder can be accesses through the browser
// the content is served from the root of the site
// localhost:5000/readme.txt
app.use(express.static("public"));

const courses = [
  { id: 1, name: "course1" },
  { id: 2, name: "course2" },
  { id: 3, name: "course3" },
  { id: 4, name: "course4" }
];

function validateCourse(course) {
  // you have to explicitly map out every input you expect like this if you have one not mentioned it won't work
  const schema = {
    id: Joi.string().required(),
    name: Joi.string()
      .min(3)
      .required()
  };

  return Joi.validate(course, schema);
}

app.get("/", (req, res) => {
  res.send("hello world");
});

app.get("/api/courses", (req, res) => {
  res.send([1, 2, 3]);
});

app.post("/api/courses", (req, res) => {
  const { error } = validateCourse(req.body);
  // with joi
  if (error) {
    // sends helpful message generated by joi
    return res.status(400).send(error.details[0].message);
  }

  const course = {
    id: courses.length + 1,
    name: req.body.name
  };
  courses.push(course);
  res.send(course);
});

// the order of req and res matter
app.get("/api/courses/:id", (req, res) => {
  //   console.log(req.params.id);
  //   res.send(`you picked course ${req.params.id}`);
  const course = courses.find(c => c.id === parseInt(req.params.id));
  console.log(course);
  if (!course) {
    // send is optional here for if you want to include a message
    return res.status(404).send("you dun goofed");
  }
  res.send(course);
});

app.get("/api/posts/:year/:month", (req, res) => {
  // it's literally an object of the names and values
  //   http://localhost:5000/api/posts/1993/3
  // gives {"year":"1993","month":"3"}
  res.send(req.params);
});

app.get("/api/cars/:make/:model", (req, res) => {
  // it's literally an object of the names and values
  // http://localhost:5000/api/cars/ford/focus?sortBy=name
  // gives {"sortBy":"name"}
  res.send(req.query);
});

app.put("/api/courses/:id", (req, res) => {
  // look up course
  // the c value is actually the object in the array you're checking
  // the c.id is accessing it like a key
  const course = courses.find(c => c.id === parseInt(req.params.id));

  // if not exist return 404
  if (!course) {
    return res.status(404).send("Course not found.");
  }

  // validate
  // if invalid return 400 - bad request
  // const schema = {
  //   id: Joi.string().required(),
  //   name: Joi.string()
  //     .min(3)
  //     .required()
  // };

  // const result = Joi.validate(req.body, schema);

  const { error } = validateCourse(req.body);

  if (error) {
    return res.status(400).send(error.details[0].message);
  }

  // update the course - he's just updating name
  // but actually you can safely do it because you validate the data above
  course.name = req.body.name;
  course.id = req.body.id;

  // return the updated course
  res.send(course);
});

// app.post();

// app.put();

// app.delete();
app.delete("/api/courses/:id", (req, res) => {
  const course = courses.find(c => c.id === parseInt(req.params.id));

  console.log("course is ", course);

  if (!course) {
    return res
      .status(404)
      .send(
        `A course with the given ID of ${req.params.id} could not be found.`
      );
  }

  const index = courses.indexOf(course);

  courses.splice(index, 1);
  res.send(course);
});

// either use an env variable or 3000
// process global
const port = process.env.PORT || 3000;

// callback function is optional
app.listen(port, () => {
  console.log(`Listening on port ${port}`);
});
